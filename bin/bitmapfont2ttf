#!/usr/bin/env fontforge
# -*- mode: python; coding: utf-8 -*-

import fontforge
import os
import shutil
import sys
import argparse

# thanks https://stackoverflow.com/questions/5226958/which-equivalent-function-in-python
def which(file_name):
    for path in os.environ["PATH"].split(os.pathsep):
        full_path = os.path.join(path, file_name)
        if os.path.exists(full_path) and os.access(full_path, os.X_OK):
            return full_path
    return None

class BitmapFont2TTF:

    def __init__(self):
        self.saveSFD = False
        self.AUTOTRACE_NAME = 'exact-autotrace-c'
        self.autotrace = which(self.AUTOTRACE_NAME)
        if self.autotrace == None:
            sys.stderr.write('no ' + self.AUTOTRACE_NAME + ' program found\n')
            exit(1)
        os.environ['AUTOTRACE'] = self.autotrace
        fontforge.setPrefs('PreferPotrace', False)
        fontforge.setPrefs('AutotraceArgs', '')

    def formatString(self, string):
        string = string.replace('{pixelSize}',  str(self.formatDict['pixelSize']))
        string = string.replace('{fontName}',   str(self.formatDict['fontName']))
        string = string.replace('{familyName}', str(self.formatDict['familyName']))
        string = string.replace('{fullName}',   str(self.formatDict['fullName']))
        return string

    def bitmapfont2ttf(self, filename, destfilename = None):

        # Work around an issue where importBitmaps segfaults if you only
        # specify a filename 'foo.pcf'.  Yes, './foo.pcf' works pefectly
        # fine whereas 'foo.pcf' does not.
        if filename == os.path.basename(filename):
            filename = os.path.join('.', filename)

        if self.args.verbose == None:
            self.args.verbose = 0

        if self.args.verbose == 0:
            if 'AUTOTRACE_VERBOSE' in os.environ:
                del os.environ['AUTOTRACE_VERBOSE']
        else:
            os.environ['AUTOTRACE_VERBOSE'] = str(self.args.verbose)

        # compute bitmap pixel size
        font = fontforge.font()
        sys.stderr.write("*** getting bitmap pixel size...\n")
        retval = font.importBitmaps(filename, False)
        (pixelSize,) = font.bitmapSizes

        font = fontforge.font()
        sys.stderr.write("*** importing bitmaps...\n")
        retval = font.importBitmaps(filename, True)

        glyphCount = 0
        for glyph in font.glyphs():
            glyphCount += 1

        self.formatDict = {}
        self.formatDict['pixelSize']  = pixelSize
        self.formatDict['fontName']   = font.fontname
        self.formatDict['familyName'] = font.familyname
        self.formatDict['fullName']   = font.fullname

        # FamilyName: Courier
        # FontName: CourierBoldOblique
        # FullName: Courier Bold Oblique
        # ItalicAngle: 0
        # Weight: Bold

        # FontName: CharterBoldItalic
        # FullName: Bitstream Charter Black Italic
        # FamilyName: Charter
        # Weight: Bold

        if self.args != None:
            if self.args.copyright != None:
                font.copyright = self.formatString(self.args.copyright)
            if self.args.comment != None:
                font.comment = self.formatString(self.args.comment)
            if self.args.font_name != None:
                font.fontname = self.formatString(self.args.font_name)
            if self.args.family_name != None:
                font.familyname = self.formatString(self.args.family_name)
            if self.args.full_name != None:
                font.fullname = self.formatString(self.args.full_name)
            if self.args.version != None:
                font.version = self.formatString(self.args.version)
            if self.args.weight != None:
                font.weight = self.formatString(self.args.weight)
            if self.args.italic_angle != None:
                font.italicangle = self.args.italic_angle

        # sys.stderr.write("*** selecting...\n")
        # font.selection.select(('ranges', None), 48, 57)
        sys.stderr.write("*** autotracing %d glyphs...\n" % glyphCount)

        glyphIndex = 0
        for glyph in font.glyphs():
            glyphIndex += 1
            if self.args.verbose >= 2:
                sys.stderr.write("*** [%d/%d] %s\n" % (glyphIndex, glyphCount, glyph))
            elif self.args.verbose >= 1:
                sys.stderr.write("*** [%d/%d]\r" % (glyphIndex, glyphCount))
            glyph.autoTrace()
            glyph.addExtrema()
            glyph.simplify()

        if destfilename == None:
            (rootdestfilename, junk) = os.path.splitext(filename)
            destfilename = rootdestfilename + '.ttf'
        else:
            (rootdestfilename, junk) = os.path.splitext(destfilename)

        sfdfilename = rootdestfilename + '.sfd'

        destfilename = destfilename.replace('{pixelSize}', str(pixelSize))

        destfilename = self.formatString(destfilename)
        sfdfilename = self.formatString(sfdfilename)

        font.generate(destfilename)
        sys.stderr.write("*** Wrote %s\n" % destfilename)

        if self.args.save_sfd:
            font.save(sfdfilename)
            sys.stderr.write("*** Wrote %s\n" % sfdfilename)

bf2ttf = BitmapFont2TTF()

parser = argparse.ArgumentParser(description = "Generate TTF files from bitmap fonts, e.g., BDF and PCF")
parser.add_argument("--copyright",     help = "assign copyright holder and date, e.g., 'Copyright (c) 2020 Darren Embry'")
parser.add_argument("--comment",       help = "assign comment string, e.g., '2020-01-01'")
parser.add_argument("--family-name",   help = "assign family name, e.g., 'Comic Sans'")
parser.add_argument("--font-name",     help = "assign font name, e.g., 'ComicSansBoldItalic'")
parser.add_argument("--full-name",     help = "assign full name, e.g., 'Comic Sans Bold Italic'")
parser.add_argument("--version",       help = "assign version, e.g., '001.000'")
parser.add_argument("--weight",        help = "assign font weight, e.g., 'Regular', 'Bold'")
parser.add_argument("--italic-angle",  type = float, help = "assign font italic angle, e.g., -22.5")
parser.add_argument("--save-sfd",      help = "keep .sfd file (for FontForge)", action = "store_true")
parser.add_argument("--verbose", "-v", action = 'count', help = "increase output verbosity")
parser.add_argument("filename")
parser.add_argument("destfilename", nargs = '?')

args = parser.parse_args()
bf2ttf.args = args

bf2ttf.bitmapfont2ttf(filename = args.filename, destfilename = args.destfilename)
