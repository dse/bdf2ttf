#!/usr/bin/env fontforge
# -*- mode: python; coding: utf-8 -*-

import fontforge
import os
import shutil
import sys
import argparse

# thanks https://stackoverflow.com/questions/5226958/which-equivalent-function-in-python
def which(file_name):
    for path in os.environ["PATH"].split(os.pathsep):
        full_path = os.path.join(path, file_name)
        if os.path.exists(full_path) and os.access(full_path, os.X_OK):
            print("*** " + full_path)
            return full_path
    return None

class BitmapFont2TTF:

    def __init__(self):
        self.saveSFD = True
        self.saveTTF = True
        self.AUTOTRACE_NAME = 'exact-autotrace-c'
        self.autotrace = which(self.AUTOTRACE_NAME)
        if self.autotrace == None:
            sys.stderr.write('no ' + self.AUTOTRACE_NAME + ' program found\n')
            exit(1)
        os.environ['AUTOTRACE'] = self.autotrace
        fontforge.setPrefs('PreferPotrace', False)
        fontforge.setPrefs('AutotraceArgs', '')

    def bitmapfont2ttf(self, filename):

        # Work around an issue where importBitmaps segfaults if you only
        # specify a filename 'foo.pcf'.  Yes, './foo.pcf' works pefectly
        # fine whereas 'foo.pcf' does not.
        if filename == os.path.basename(filename):
            filename = os.path.join('.', filename)

        font = fontforge.font()
        print("*** importing bitmaps...")
        font.importBitmaps(filename, True)

        # FamilyName: Courier
        # FontName: CourierBoldOblique
        # FullName: Courier Bold Oblique
        # ItalicAngle: 0
        # Weight: Bold

        # FontName: CharterBoldItalic
        # FullName: Bitstream Charter Black Italic
        # FamilyName: Charter
        # Weight: Bold

        if self.args != None:
            if self.args.copyright != None:
                font.copyright = self.args.copyright
            if self.args.comment != None:
                font.comment = self.args.comment
            if self.args.font_name != None:
                font.fontname = self.args.font_name
            if self.args.family_name != None:
                font.familyname = self.args.family_name
            if self.args.full_name != None:
                font.fullname = self.args.full_name
            if self.args.version != None:
                font.version = self.args.version
            if self.args.weight != None:
                font.weight = self.args.weight
            if self.args.italic_angle != None:
                font.italicangle = self.args.italic_angle

        print("*** selecting...")
        font.selection.select(('ranges', None), 48, 57)
        print("*** autotracing...")

        glyphCount = 0
        for glyph in font.glyphs():
            glyphCount += 1

        glyphIndex = 0
        for glyph in font.glyphs():
            glyphIndex += 1
            print("***     [%d/%d] autotracing %s ..." % (glyphIndex, glyphCount, glyph))
            glyph.autoTrace()

        (basename, junk) = os.path.splitext(filename)

        if self.saveTTF:
            ttfname = basename + '.ttf'
            font.generate(ttfname)

        if self.saveSFD:
            sfdname = basename + '.sfd'
            font.save(sfdname)

bf2ttf = BitmapFont2TTF()

parser = argparse.ArgumentParser(description = "Generate TTF files from bitmap fonts, e.g., BDF and PCF")
parser.add_argument("--copyright",    help = "assign copyright holder and date, e.g., 'Copyright (c) 2020 Darren Embry'")
parser.add_argument("--comment",      help = "assign comment string, e.g., '2020-01-01'")
parser.add_argument("--family-name",  help = "assign family name, e.g., 'Comic Sans'")
parser.add_argument("--font-name",    help = "assign font name, e.g., 'ComicSansBoldItalic'")
parser.add_argument("--full-name",    help = "assign full name, e.g., 'Comic Sans Bold Italic'")
parser.add_argument("--version",      help = "assign version, e.g., '001.000'")
parser.add_argument("--weight",       help = "assign font weight, e.g., 'Regular', 'Bold'")
parser.add_argument("--italic-angle", type = float, help = "assign font italic angle, e.g., -22.5")
parser.add_argument("filename", nargs = '*')

args = parser.parse_args()
bf2ttf.args = args

for filename in args.filename:
    bf2ttf.bitmapfont2ttf(filename)
