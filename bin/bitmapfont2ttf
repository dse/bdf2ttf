#!/usr/bin/env fontforge
# -*- mode: python; coding: utf-8 -*-

import fontforge
import os
import shutil
import sys
import argparse
import re
import collections

# thanks https://stackoverflow.com/questions/5226958/which-equivalent-function-in-python
def which(file_name):
    for path in os.environ["PATH"].split(os.pathsep):
        full_path = os.path.join(path, file_name)
        if os.path.exists(full_path) and os.access(full_path, os.X_OK):
            return full_path
    return None

def bdfParseLine(line):
    words = []
    line = line.strip()
    while True:
        match = re.match(r'^\s*"((?:[^"]+|"")*)"($|\s+)', line)
        if match:
            word = match.group(1) # $1
            word = re.sub(r'""', '"', word)
            words.append(word)
            line = line[len(match.group(0)):] # $'
            continue
        match = re.match(r'^\s*(\S+)($|\s+)', line)
        if match:
            word = match.group(1) # $1
            words.append(word)
            line = line[len(match.group(0)):] # $'
            continue
        break
    return words

class MyBDFChar:
    def __init__(self, name = None):
        self.name = name
        self.encoding = None
        self.nonStandardEncoding = None
        self.hasBoundingBox = False
        self.boundingBoxX = None
        self.boundingBoxY = None
        self.boundingBoxXOffset = None
        self.boundingBoxYOffset = None
    def __str__(self):
        result = "<MyBDFChar"
        if self.name != None:
            result += (" %s" % self.name)
        if self.encoding != None:
            result += (" @%d" % self.encoding)
        if self.nonStandardEncoding != None:
            result += (" @[%d]" % self.nonStandardEncoding)
        if self.hasBoundingBox:
            result += (" [%g, %g offset %g, %g]" % (
                self.boundingBoxX, self.boundingBoxY,
                self.boundingBoxXOffset, self.boundingBoxYOffset
            ))
        result += ">"
        return result

class MyBDF:
    def __init__(self, filename = None):
        self.pointSize = None
        self.xRes = None
        self.yRes = None
        self.boundingBoxX = None
        self.boundingBoxY = None
        self.boundingBoxXOffset = None
        self.boundingBoxYOffset = None
        self.pixelSize = None
        self.pointSize = None
        self.resolutionX = None
        self.resolutionY = None
        self.spacing = None
        self.capHeight = None
        self.xHeight = None
        self.ascent = None
        self.descent = None
        self.filename = None
        self.hasBoundingBox = False
        self.chars = []
        self.charsByEncoding = {}
        self.charsByNonStandardEncoding = {}
        self.charsByName = {}
        if filename != None:
            self.read(filename)
    def read(self, filename):
        with open(filename) as fp:
            self.filename = filename
            self.readFp(fp)
    def readFp(self, fp):
        for line in fp:
            args = bdfParseLine(line)
            if len(args) < 1:
                continue
            (cmd, args) = (args[0].upper(), args[1:])
            if cmd == 'CHARS':
                self.readCharsFp(fp)
            if cmd == 'SIZE' and len(args) >= 3:
                self.pointSize = float(args[0])
                self.xRes      = float(args[1])
                self.yRes      = float(args[2])
                continue
            if cmd == 'FONTBOUNDINGBOX' and len(args) >= 4:
                self.hasBoundingBox = True
                self.boundingBoxX       = int(args[0])
                self.boundingBoxY       = int(args[1])
                self.boundingBoxXOffset = int(args[2])
                self.boundingBoxYOffset = int(args[3])
                continue
            if cmd == 'STARTPROPERTIES':
                self.readPropertiesFp(fp)
    def readPropertiesFp(self, fp):
        for line in fp:
            args = bdfParseLine(line)
            if len(args) < 1:
                continue
            (cmd, args) = (args[0].upper(), args[1:])
            if cmd == 'ENDPROPERTIES':
                return
            if cmd == 'PIXEL_SIZE' and len(args) >= 1:
                self.pixelSize = float(args[0])
            if cmd == 'POINT_SIZE' and len(args) >= 1:
                self.pointSize = float(args[0])
            if cmd == 'RESOLUTION_X' and len(args) >= 1:
                self.resolutionX = float(args[0])
            if cmd == 'RESOLUTION_Y' and len(args) >= 1:
                self.resolutionY = float(args[0])
            if cmd == 'SPACING' and len(args) >= 1:
                self.spacing = args[0].upper()
            if cmd == 'CAP_HEIGHT' and len(args) >= 1:
                self.capHeight = float(args[0])
            if cmd == 'X_HEIGHT' and len(args) >= 1:
                self.xHeight = float(args[0])
            if cmd == 'FONT_ASCENT' and len(args) >= 1:
                self.ascent = float(args[0])
            if cmd == 'FONT_DESCENT' and len(args) >= 1:
                self.descent = float(args[0])
    def readCharsFp(self, fp):
        for line in fp:
            args = bdfParseLine(line)
            if len(args) < 1:
                continue
            (cmd, args) = (args[0].upper(), args[1:])
            if cmd == 'STARTCHAR':
                char = self.readCharFp(fp, args[0])
                self.chars.append(char)
                if char.encoding != None:
                    self.charsByEncoding[char.encoding] = char
                if char.nonStandardEncoding != None:
                    self.charsByEncoding[char.nonStandardEncoding] = char
                if char.name != None:
                    self.charsByName[char.name] = char
    def readCharFp(self, fp, name):
        char = MyBDFChar(name)
        for line in fp:
            args = bdfParseLine(line)
            if len(args) < 1:
                continue
            (cmd, args) = (args[0].upper(), args[1:])
            if cmd == 'BITMAP':
                return char
            elif cmd == 'ENDCHAR':
                return char
            elif cmd == 'ENCODING':
                char.encoding = int(args[0])
                if len(args) > 1:
                    char.nonStandardEncoding = int(args[1])
                if char.encoding == -1:
                    char.encoding = None
            elif cmd == 'BBX':
                char.hasBoundingBox = True
                char.boundingBoxX       = int(args[0])
                char.boundingBoxY       = int(args[1])
                char.boundingBoxXOffset = int(args[2])
                char.boundingBoxYOffset = int(args[3])

    def __str__(self):
        result = "<MyBDF"
        if self.filename != None:
            result += (" %s" % self.filename)
        if self.pointSize != None:
            result += (" %gpt" % self.pointSize)
        if self.xRes != None:
            result += (" %gxdpi" % self.xRes)
        if self.yRes != None:
            result += (" %gydpi" % self.yRes)
        if self.hasBoundingBox:
            result += (" [%g, %g offset %g, %g]" % (
                self.boundingBoxX, self.boundingBoxY,
                self.boundingBoxXOffset, self.boundingBoxYOffset
            ))
        result += ">"
        return result

class BitmapFont2TTF:

    def __init__(self):
        self.saveSFD = False
        self.AUTOTRACE_NAME = 'exact-autotrace-c'
        self.autotrace = which(self.AUTOTRACE_NAME)
        if self.autotrace == None:
            sys.stderr.write('no ' + self.AUTOTRACE_NAME + ' program found\n')
            exit(1)
        os.environ['AUTOTRACE'] = self.autotrace
        fontforge.setPrefs('PreferPotrace', False)
        fontforge.setPrefs('AutotraceArgs', '')

    def formatString(self, string):
        string = string.replace('{pixelSize}',  str(self.formatDict['pixelSize']))
        string = string.replace('{fontName}',   str(self.formatDict['fontName']))
        string = string.replace('{familyName}', str(self.formatDict['familyName']))
        string = string.replace('{fullName}',   str(self.formatDict['fullName']))
        return string

    def bitmapfont2ttf(self, filename, destfilename = None, args = None):

        bdf = None
        swidth = None
        ascent = None
        descent = None
        ascentPx = None
        descentPx = None
        scale = None
        scaleTransform = None
        namedPixelSize = None
        nearestMultipleOfThree = False
        nextMultipleOfThree = False
        asciiOnly = False
        sfdDir = None

        if args != None:
            if filename == None:
                filename = args.filename
            if destfilename == None:
                filename = args.destfilename
            if args.nearest_multiple_of_three != None:
                nearestMultipleOfThree = args.nearest_multiple_of_three
            if args.next_multiple_of_three != None:
                nextMultipleOfThree = args.next_multiple_of_three
            if args.ascii_only != None:
                asciiOnly = args.ascii_only
            if args.sfd_dir != None:
                sfdDir = args.sfd_dir

        # Work around an issue where importBitmaps segfaults if you only
        # specify a filename 'foo.pcf'.  Yes, './foo.pcf' works pefectly
        # fine whereas 'foo.pcf' does not.
        if filename == os.path.basename(filename):
            filename = os.path.join('.', filename)

        if self.args.verbose == None:
            self.args.verbose = 0

        if self.args.verbose == 0:
            if 'AUTOTRACE_VERBOSE' in os.environ:
                del os.environ['AUTOTRACE_VERBOSE']
        else:
            os.environ['AUTOTRACE_VERBOSE'] = str(self.args.verbose)

        if (re.search(r'\.bdf$', filename)):
            bdf = MyBDF(filename)

        font = fontforge.font()
        retval = font.importBitmaps(filename, False)
        (namedPixelSize,) = font.bitmapSizes

        if bdf != None and bdf.hasBoundingBox:
            pixelSize = bdf.boundingBoxY
        else:
            pixelSize = namedPixelSize

        if bdf != None:
            font = fontforge.font()
            if (bdf.spacing == 'M' or bdf.spacing == 'C') and bdf.hasBoundingBox:
                swidth = int(0.5 + 1.0 * font.em * bdf.boundingBoxX / bdf.boundingBoxY)
            if bdf.hasBoundingBox:
                ascentPx = bdf.boundingBoxY + bdf.boundingBoxYOffset
                descentPx = -bdf.boundingBoxYOffset
                ascent = int(0.5 + 1.0 * font.em * ascentPx / pixelSize)
                descent = int(0.5 + 1.0 * font.em * descentPx / pixelSize)

        newPixelSize = pixelSize
        if nextMultipleOfThree:
            newPixelSize = 3 * int((pixelSize + 2) / 3)
            sys.stderr.write("    pixel size (next): %s => %s\n" % (pixelSize, newPixelSize))
        elif nearestMultipleOfThree:
            newPixelSize = 3 * int((pixelSize + 1) / 3)
            sys.stderr.write("    pixel size (nearest): %s => %s\n" % (pixelSize, newPixelSize))

        font = fontforge.font()
        if ascent != None and descent != None:
            font.ascent = ascent
            font.descent = descent
        sys.stderr.write("*** importing bitmaps...\n")
        retval = font.importBitmaps(filename, True)

        if newPixelSize != pixelSize:
            # increased pixel size scales DOWN; decreased pixel size scales UP
            scale = 1.0 * pixelSize / newPixelSize
            sys.stderr.write("    scaling by %f\n" % scale)
            scaleTransform = psMat.scale(scale)
            if ascentPx != None and descentPx != None:
                if newPixelSize == pixelSize + 2:
                    ascentPx += 1
                    descentPx += 1
                elif newPixelSize == pixelSize + 1:
                    descentPx += 1
                elif newPixelSize == pixelSize - 1:
                    ascentPx -= 1
                ascent = int(0.5 + 1.0 * font.em * ascentPx / newPixelSize)
                descent = int(0.5 + 1.0 * font.em * descentPx / newPixelSize)
                font.ascent = ascent
                font.descent = descent
                sys.stderr.write("    ascent = %d; descent = %d\n" % (font.ascent, font.descent))

        glyphCount = 0
        for glyph in font.glyphs():
            if asciiOnly and (glyph.encoding < 32 or glyph.encoding > 126):
                continue
            glyphCount += 1

        self.formatDict = {}
        self.formatDict['pixelSize']    = namedPixelSize
        self.formatDict['newPixelSize'] = newPixelSize
        self.formatDict['fontName']     = font.fontname
        self.formatDict['familyName']   = font.familyname
        self.formatDict['fullName']     = font.fullname

        if self.args != None:
            if self.args.copyright != None:
                font.copyright = self.formatString(self.args.copyright)
            if self.args.comment != None:
                font.comment = self.formatString(self.args.comment)
            if self.args.font_name != None:
                font.fontname = self.formatString(self.args.font_name)
            if self.args.family_name != None:
                font.familyname = self.formatString(self.args.family_name)
            if self.args.full_name != None:
                font.fullname = self.formatString(self.args.full_name)
            if self.args.version != None:
                font.version = self.formatString(self.args.version)
            if self.args.weight != None:
                font.weight = self.formatString(self.args.weight)
            if self.args.italic_angle != None:
                font.italicangle = self.args.italic_angle

        sys.stderr.write("*** autotracing %d glyphs...\n" % glyphCount)

        glyphIndex = 0
        for glyph in font.glyphs():
            if asciiOnly and (glyph.encoding < 32 or glyph.encoding > 126):
                continue
            glyphIndex += 1
            if self.args.verbose >= 2:
                sys.stderr.write("*** [%d/%d] %s\n" % (glyphIndex, glyphCount, glyph))
            elif self.args.verbose >= 1:
                sys.stderr.write("*** [%d/%d]\r" % (glyphIndex, glyphCount))
            glyph.autoTrace()
            glyph.addExtrema()
            glyph.simplify()
            if swidth != None:
                glyph.width = swidth
            if scaleTransform != None:
                glyph.transform(scaleTransform)

        if destfilename == None:
            (rootdestfilename, junk) = os.path.splitext(filename)
            destfilename = rootdestfilename + '.ttf'
        else:
            (rootdestfilename, junk) = os.path.splitext(destfilename)

        sfdfilename = rootdestfilename + '.sfd'
        if sfdDir != None:
            sfdfilename = sfdDir + '/' + os.path.basename(sfdfilename)

        destfilename = destfilename.replace('{pixelSize}', str(pixelSize))

        destfilename = self.formatString(destfilename)
        sfdfilename = self.formatString(sfdfilename)

        font.generate(destfilename)
        sys.stderr.write("*** Wrote %s\n" % destfilename)

        if self.args.save_sfd:
            font.save(sfdfilename)
            sys.stderr.write("*** Wrote %s\n" % sfdfilename)

bf2ttf = BitmapFont2TTF()

parser = argparse.ArgumentParser(description = "Generate TTF files from bitmap fonts, e.g., BDF and PCF")
parser.add_argument("--copyright",     help = "assign copyright holder and date, e.g., 'Copyright (c) 2020 Darren Embry'")
parser.add_argument("--comment",       help = "assign comment string, e.g., '2020-01-01'")
parser.add_argument("--family-name",   help = "assign family name, e.g., 'Comic Sans'")
parser.add_argument("--font-name",     help = "assign font name, e.g., 'ComicSansBoldItalic'")
parser.add_argument("--full-name",     help = "assign full name, e.g., 'Comic Sans Bold Italic'")
parser.add_argument("--version",       help = "assign version, e.g., '001.000'")
parser.add_argument("--weight",        help = "assign font weight, e.g., 'Regular', 'Bold'")
parser.add_argument("--italic-angle",  type = float, help = "assign font italic angle, e.g., -22.5")
parser.add_argument("--save-sfd",      help = "keep .sfd file (for FontForge)", action = "store_true")
parser.add_argument("--verbose", "-v", action = 'count', help = "increase output verbosity")
parser.add_argument("--nearest-multiple-of-three", action = 'store_true')
parser.add_argument("--next-multiple-of-three", action = 'store_true')
parser.add_argument("--ascii-only", action = 'store_true')
parser.add_argument("--sfd-dir", type = str)
parser.add_argument("filename")
parser.add_argument("destfilename", nargs = '?')

args = parser.parse_args()
bf2ttf.args = args

bf2ttf.bitmapfont2ttf(
    filename = args.filename,
    destfilename = args.destfilename,
    args = args
)
